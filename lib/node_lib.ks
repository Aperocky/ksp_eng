RUNONCEPATH("LIB/BASE_LIB.KS").

FUNCTION NODE_EXEC {
    WAIT 1. // NODE MAY NOT HAVE POPULATED YET
    IF NOT HASNODE {
        PRINT "NO NODE SCHEDULED".
        RETURN.
    }
    CLEARSCREEN.
    SAS OFF.
    LOCAL NODE TO NEXTNODE.
    LOCAL DURATION TO NODE:DELTAV:MAG/(SHIP:MAXTHRUST/SHIP:MASS).
    WARP_TO_TIME(NODE:ETA - DURATION/2 - 20).
    LOCAL HEADING TO NODE:DELTAV.
    LOCK STEERING TO HEADING.
    WAIT NODE:ETA - DURATION/2.

    LOCAL TVAL TO 0.
    LOCK THROTTLE TO TVAL.
    LOCAL OG_NODE_HEADING TO NODE:DELTAV.
    UNTIL FALSE {
        IF STAGE:LIQUIDFUEL < 1 {
            STAGE. WAIT 0.
        }
        LOCAL MAX_ACC TO SHIP:MAXTHRUST/SHIP:MASS.
        SET TVAL TO MIN(NODE:DELTAV:MAG/MAX_ACC, 1).
        SET HEADING TO NODE:DELTAV.
        IF VDOT(OG_NODE_HEADING, NODE:DELTAV) < 0 OR NODE:DELTAV:MAG < 0.1 {
            BREAK.
        }
        PRINT "ALTITUDE:   " + ROUND(SHIP:ALTITUDE) + " METERS    " AT (5,2).
        PRINT "APOAPSIS:   " + ROUND(SHIP:APOAPSIS) + " METERS    " AT (5,3).
        PRINT "PERIAPSIS:  " + ROUND(SHIP:PERIAPSIS) + " METERS    " AT (5,4).
        PRINT "DV LEFT: " + ROUND(NODE:DELTAV:MAG) + " M/S     " AT (5,5).
    }
    SET TVAL TO 0.
    UNLOCK STEERING.
    UNLOCK THROTTLE.
    REMOVE NODE.
}

FUNCTION CIRCULARIZE_NODE {
    // USE NODE TO CIRCULARIZE, THIS IS SUPERIOR TO FEEDBACK LOOP CIRCULARIZATION
    PARAMETER AT_APOAPSIS IS TRUE.

    LOCAL CURR_SMA TO (SHIP:APOAPSIS + SHIP:PERIAPSIS)/2 + SHIP:BODY:RADIUS.
    LOCAL GOAL_SMA TO CHOOSE SHIP:APOAPSIS IF AT_APOAPSIS ELSE SHIP:PERIAPSIS.
    SET GOAL_SMA TO GOAL_SMA + SHIP:BODY:RADIUS.
    LOCAL BASE_V TO SQRT(SHIP:BODY:MU * (2/GOAL_SMA - 1/CURR_SMA)).
    LOCAL GOAL_V TO SQRT(SHIP:BODY:MU/GOAL_SMA).

    LOCAL WAIT_TIME TO CHOOSE ETA:APOAPSIS IF AT_APOAPSIS ELSE ETA:PERIAPSIS.
    ADD NODE(TIME:SECONDS + WAIT_TIME, 0, 0, GOAL_V - BASE_V).
}

FUNCTION HOHMANN_TRANSFER {
    // ASSUMES STARTING FROM CICULAR PROGRADE ORBIT OF NO INCLINATION
    PARAMETER AP_GOAL. // TARGET APOAPSIS/PERIAPSIS ALTITUDE.
    PARAMETER WAIT_TIME. // WAIT FOR X SECONDS BEFORE FIRING
    UNTIL NOT HASNODE {
        REMOVE NEXTNODE.
        WAIT 1.
    }

    LOCAL CURR_SMA TO (SHIP:APOAPSIS + SHIP:PERIAPSIS)/2 + SHIP:BODY:RADIUS.
    LOCAL GOAL_SMA TO (AP_GOAL + SHIP:BODY:RADIUS + CURR_SMA)/2.
    LOCAL BASE_V TO SQRT(SHIP:BODY:MU/CURR_SMA).
    LOCAL GOAL_V TO SQRT(SHIP:BODY:MU * (2/CURR_SMA - 1/GOAL_SMA)).
    ADD NODE(TIME:SECONDS + WAIT_TIME, 0, 0, GOAL_V - BASE_V).
}

FUNCTION GET_INCLINATION {
    // GET INCLINATION BETWEEN TARGET ORBIT AND CURRENT ORBIT
    IF NOT HASTARGET {
        PRINT("NO TARGET").
        RETURN.
    }

    LOCAL SP TO SHIP:POSITION - BODY:POSITION.
    LOCAL TP TO TARGET:POSITION - BODY:POSITION.
    LOCAL SN TO VCRS(SP, SHIP:VELOCITY:ORBIT).
    LOCAL TN TO VCRS(TP, TARGET:VELOCITY:ORBIT).
    LOCAL AN_DN TO VCRS(TN, SN).
    LOCAL INC TO VANG(SN, TN).
    LOCAL PHASE TO VANG(SP, AN_DN).
    PRINT("INCLINATION IS " + ROUND(INC, 2) + " DEGREES").
    PRINT("PHASE IS " + ROUND(PHASE, 2) + " DEGREES").
}
