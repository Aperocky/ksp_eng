// IN flight lib mostly pertaining to intra-atmospheric flights on Kerbin.
// lib_navball from KSLib is inspiration to most of this file.

FUNCTION TO_UNIT_VECTOR {
    PARAMETER THING.
    IF THING:ISTYPE("VECTOR") {
        RETURN THING:NORMALIZED.
    } ELSE IF THING:ISTYPE("DIRECTION") {
        RETURN THING:FOREVECTOR.
    } ELSE IF THING:ISTYPE("VESSEL") OR THING:ISTYPE("PART") {
        RETURN THING:FACING:FOREVECTOR.
    } ELSE IF THING:ISTYPE("GEOPOSITION") OR THING:ISTYPE("WAYPOINT") {
        RETURN THING:POSITION:NORMALIZED.
    } ELSE {
        PRINT "TYPE: " + THING:TYPENAME + " IS NOT RECOGNIZED".
    }
}

FUNCTION COMPASS_FOR {
    PARAMETER VES IS SHIP.
    PARAMETER VEC IS "NONE".
    LOCAL POINTING TO VES:FACING:FOREVECTOR.
    IF NOT (VEC="NONE") {
        SET POINTING TO TO_UNIT_VECTOR(VEC).
    }
    LOCAL EAST TO VCRS(VES:UP:VECTOR, VES:NORTH:VECTOR).
    LOCAL TRIG_X TO VDOT(VES:NORTH:VECTOR, POINTING).
    LOCAL TRIG_Y TO VDOT(EAST, POINTING).

    LOCAL RESULT TO ARCTAN2(TRIG_Y, TRIG_X).
    IF RESULT < 0 {
        RETURN 360 + RESULT.
    } ELSE {
        RETURN RESULT.
    }
}

 FUNCTION PITCH_FOR {
    PARAMETER VES IS SHIP.
    PARAMETER VEC IS "NONE".
    LOCAL POINTING TO VES:FACING:FOREVECTOR.
    IF NOT (VEC="NONE") {
        SET POINTING TO TO_UNIT_VECTOR(VEC).
    }
    RETURN 90 - VANG(VES:UP:VECTOR, POINTING).
}

 FUNCTION ROLL_FOR {
    PARAMETER VES IS SHIP.
    LOCAL POINTING TO VES:FACING.
    LOCAL TRIG_X TO VDOT(POINTING:TOPVECTOR,VES:UP:VECTOR).
    IF ABS(TRIG_X) < 0.0035 {
        RETURN 0.
    } ELSE {
        LOCAL VEC_Y TO VCRS(VES:UP:VECTOR,VES:FACING:FOREVECTOR).
        LOCAL TRIG_Y TO VDOT(POINTING:TOPVECTOR,VEC_Y).
        RETURN ARCTAN2(TRIG_Y,TRIG_X).
    }
}

 FUNCTION GET_SELECTED_WAYPOINT {
    FOR WAYPOINT IN ALLWAYPOINTS() {
        IF WAYPOINT:ISSELECTED() {
            RETURN WAYPOINT.
        }
    }
    PRINT "NO WAYPOINT SELECTED".
    RETURN "NONE".
}

FUNCTION AUTODRIVE_TO_WAYPOINT {
    PARAMETER MAX_SPEED.
    BRAKES OFF.
    SET WAYPOINT TO GET_SELECTED_WAYPOINT().
    IF WAYPOINT="NONE" {
        RETURN.
    }
    CLEARSCREEN.
    SET TVAL TO 0.
    SET BEARING TO COMPASS_FOR(SHIP, WAYPOINT).
    LOCK THROTTLE TO TVAL.
    LOCK STEERING TO HEADING(BEARING, 0).
    UNTIL WAYPOINT:POSITION:MAG < 300 {
        SET BEARING TO COMPASS_FOR(SHIP, WAYPOINT).
        SET TVAL TO MAX(0, (MAX_SPEED - SHIP:GROUNDSPEED)/MAX_SPEED).
        PRINT "BEARING: " + ROUND(BEARING) + " DEGREES    " AT (5, 3).
        PRINT "DISTANCE: " + ROUND(WAYPOINT:POSITION:MAG()) + " METERS    " AT (5, 4).
        PRINT "SPEED: " + ROUND(SHIP:GROUNDSPEED*3.6) + " KPH    " AT (5, 5).
    }
    BRAKES ON.
}

FUNCTION AUTOPILOT_TO_WAYPOINT {
    PARAMETER HEIGHT.
    SET WAYPOINT TO GET_SELECTED_WAYPOINT().
    IF WAYPOINT="NONE" {
        RETURN.
    }
    CLEARSCREEN.
    SAS OFF.
    LOCAL BEARING TO COMPASS_FOR(SHIP, WAYPOINT).
    LOCAL PITCHPID TO PIDLOOP(0.002, 0.0005, 0.01, -1, 1).
    LOCAL ROLLPID TO PIDLOOP(0.002, 0, 0.01, -1, 1).
    LOCAL TVAL TO 1.
    LOCK THROTTLE TO TVAL.
    LOCK MAP_DIST TO VXCL(SHIP:UP:VECTOR, WAYPOINT:POSITION):MAG.
    UNTIL MAP_DIST < 5000 {
        LOCAL COMPASS TO COMPASS_FOR().
        LOCAL DIRECTION TO COMPASS_FOR(SHIP, WAYPOINT).
        LOCAL PITCH TO PITCH_FOR().
        LOCAL ROLL TO ROLL_FOR().
        LOCAL PITCH_AIM TO MAX(-10, MIN((HEIGHT - SHIP:ALTITUDE)/100, 30)).
        LOCAL ROLL_AIM TO MAX(-50, MIN(DIRECTION - COMPASS, 50)).
        SET TVAL TO 1 - ABS(ROLL_AIM)*0.01.
        SET PITCHPID:SETPOINT TO PITCH_AIM.
        SET ROLLPID:SETPOINT TO ROLL_AIM.
        SET SHIP:CONTROL:PITCH TO PITCHPID:UPDATE(TIME:SECONDS, PITCH).
        SET SHIP:CONTROL:ROLL TO ROLLPID:UPDATE(TIME:SECONDS, ROLL).
        SET SHIP:CONTROL:YAW TO 0.
        PRINT "PITCH: " + ROUND(PITCH) + " DEGREES     " AT (5, 2).
        PRINT "ROLL: " + ROUND(ROLL) + " DEGREES     " AT (5, 3).
        PRINT "DISTANCE: " + ROUND(MAP_DIST/1000) + " KM    " AT (5, 4).
        PRINT "SPEED: " + ROUND(SHIP:GROUNDSPEED*3.6) + " KPH    " AT (5, 5).
        IF ABS(COMPASS - DIRECTION) < 5 {
            PRINT "ETA: " + ROUND(MAP_DIST/SHIP:GROUNDSPEED) + " SECONDS    " AT (5, 6).
        }
    }
    SET SHIP:CONTROL:NEUTRALIZE TO TRUE.
    UNLOCK THROTTLE.
    SAS ON.
}

FUNCTION TAKEOFF {
    SAS OFF.
    BRAKES ON.
    GEAR ON.
    LOCAL CURR_PITCH TO PITCH_FOR().
    STAGE.
    LOCAL TVAL TO 1.
    LOCAL DIR TO HEADING(90, PITCH_FOR).
    LOCK THROTTLE TO TVAL.
    LOCK STEERING TO DIR.
    WAIT UNTIL SHIP:GROUNDSPEED > 35.
    SET DIR TO HEADING(90, CURR_PITCH + 10).
    WAIT UNTIL ALT:RADAR > 20.
    SET DIR TO HEADING(90, 30).
    GEAR OFF.
    WAIT UNTIL SHIP:ALTITUDE > 1000.
    SET DIR TO HEADING(90, 10).
    WAIT 5.
    SAS ON.
}

FUNCTION LANDING {
    PARAMETER LANDING_SPEED IS 25.
    SAS OFF.
    CLEARSCREEN.
    LOCAL COMPASS TO COMPASS_FOR().
    LOCAL ST TO HEADING(COMPASS, 0).
    LOCAL PLOOP TO PIDLOOP(0.2, 0.001, 0.1, -20, 30).
    SET THROTTLE TO 0.
    LOCK STEERING TO ST.
    WHEN ALT:RADAR < 200 THEN {
        GEAR ON.
    }
    UNTIL ALT:RADAR < 1 {
        LOCAL TARGET_ALT TO MIN(300, (SHIP:GROUNDSPEED - LANDING_SPEED) * 4).
        SET COMPASS TO COMPASS_FOR().
        SET PLOOP:SETPOINT TO TARGET_ALT.
        LOCAL PITCH TO PLOOP:UPDATE(TIME:SECONDS, ALT:RADAR).
        SET ST TO HEADING(COMPASS, PITCH).
        PRINT "ALT: " + ROUND(SHIP:ALTITUDE) + " METERS     " AT (5, 2).
        PRINT "PITCH: " + ROUND(PITCH) + " DEGREES    " AT (5, 3).
        PRINT "SPEED: " + ROUND(SHIP:GROUNDSPEED*3.6) + " KPH    " AT (5, 4).
    }
    BRAKES ON.
}
