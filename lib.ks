DECLARE FUNCTION GET_THROTTLE {
    PARAMETER DESIRED_ACC IS 20.
    LOCAL MAX_ACC TO SHIP:MAXTHRUST/SHIP:MASS+0.01.
    RETURN MIN(1, DESIRED_ACC/MAX_ACC).
}

DECLARE FUNCTION PRINT_PARAMS {
    PARAMETER OPTIONAL_ONE IS "".
    PRINT "ALTITUDE:   " + ROUND(SHIP:ALTITUDE) + "  METERS    " AT (5,5).
    PRINT "APOAPSIS:   " + ROUND(SHIP:APOAPSIS) + "  METERS    " AT (5,6).
    PRINT "CLIMB RATE: " + ROUND(SHIP:VERTICALSPEED) + "  M/S" AT (5,7).
    PRINT "GRND SPEED: " + ROUND(SHIP:GROUNDSPEED*3.6) + "  KPH" AT (5,8).
    PRINT OPTIONAL_ONE AT (5,9).
}

DECLARE FUNCTION GRND_INIT {
    SAS OFF.
    RCS OFF.
    GEAR OFF.
}

DECLARE FUNCTION GET_PARTS {
    PARAMETER PART_NAME.
    RETURN SHIP:PARTSDUBBEDPATTERN(PART_NAME).
}

DECLARE FUNCTION LIST_PARTS {
    SET PART_NAMES TO UNIQUESET().
    FOR PART IN SHIP:PARTS {
        PART_NAMES:ADD(PART:NAME).
    }
    FOR PART_NAME IN PART_NAMES {
        PRINT PART_NAME.
    }
}

DECLARE FUNCTION ACT_ON_PART {
    PARAMETER PART.
    PARAMETER ACTION.
    LOCAL MODULES TO PART:ALLMODULES.
    FOR MODULE IN MODULES {
        LOCAL EVENTS IS PART:GETMODULE(MODULE):ALLEVENTNAMES.
        FOR EVENT IN EVENTS {
            IF EVENT:CONTAINS(ACTION) {
                PART:GETMODULE(MODULE):DOEVENT(EVENT).
                RETURN.
            }
        }
    }
}

DECLARE FUNCTION ACT_ON_PARTS {
    PARAMETER PART_NAME.
    PARAMETER ACTION_NAME.
    LOCAL PARTS TO GET_PARTS(PART_NAME).
    FOR PART IN PARTS {
        ACT_ON_PART(PART, ACTION_NAME).
    }
}
